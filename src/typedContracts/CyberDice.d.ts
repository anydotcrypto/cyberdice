/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CyberDiceInterface extends Interface {
  functions: {
    beacon: TypedFunctionDescription<{ encode([]: []): string }>;

    board: TypedFunctionDescription<{ encode([]: []): string }>;

    computeWinner: TypedFunctionDescription<{ encode([]: []): string }>;

    deadline: TypedFunctionDescription<{ encode([]: []): string }>;

    entries: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    jobId: TypedFunctionDescription<{ encode([]: []): string }>;

    linkPayment: TypedFunctionDescription<{ encode([]: []): string }>;

    oracle: TypedFunctionDescription<{ encode([]: []): string }>;

    oracleCon: TypedFunctionDescription<{ encode([]: []): string }>;

    path: TypedFunctionDescription<{ encode([]: []): string }>;

    relayHub: TypedFunctionDescription<{ encode([]: []): string }>;

    relayers: TypedFunctionDescription<{ encode([]: [string]): string }>;

    requestBeacon: TypedFunctionDescription<{ encode([]: []): string }>;

    requestedBeacon: TypedFunctionDescription<{ encode([]: []): string }>;

    sendPrize: TypedFunctionDescription<{ encode([]: []): string }>;

    startBlock: TypedFunctionDescription<{ encode([]: []): string }>;

    submit: TypedFunctionDescription<{ encode([_message]: [string]): string }>;

    totalTickets: TypedFunctionDescription<{ encode([]: []): string }>;

    url: TypedFunctionDescription<{ encode([]: []): string }>;

    userTickets: TypedFunctionDescription<{ encode([]: [string]): string }>;

    winner: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Deposit: TypedEventDescription<{
      encodeTopics([depositor, deposit]: [null, null]): string[];
    }>;

    Entry: TypedEventDescription<{
      encodeTopics([signer, newTickets, message]: [
        string | null,
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    RequestBeacon: TypedEventDescription<{ encodeTopics([]: []): string[] }>;

    Winner: TypedEventDescription<{
      encodeTopics([winningTicket, winner, prize]: [
        BigNumberish | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class CyberDice extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CyberDice;
  attach(addressOrName: string): CyberDice;
  deployed(): Promise<CyberDice>;

  on(event: EventFilter | string, listener: Listener): CyberDice;
  once(event: EventFilter | string, listener: Listener): CyberDice;
  addListener(eventName: EventFilter | string, listener: Listener): CyberDice;
  removeAllListeners(eventName: EventFilter | string): CyberDice;
  removeListener(eventName: any, listener: Listener): CyberDice;

  interface: CyberDiceInterface;

  functions: {
    beacon(): Promise<BigNumber>;

    board(): Promise<string>;

    computeWinner(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deadline(): Promise<BigNumber>;

    entries(arg0: BigNumberish): Promise<string>;

    jobId(): Promise<string>;

    linkPayment(): Promise<BigNumber>;

    oracle(): Promise<string>;

    oracleCon(): Promise<string>;

    path(): Promise<string>;

    relayHub(): Promise<string>;

    relayers(arg0: string): Promise<boolean>;

    requestBeacon(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    requestedBeacon(): Promise<boolean>;

    sendPrize(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    startBlock(): Promise<BigNumber>;

    submit(
      _message: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    totalTickets(): Promise<BigNumber>;

    url(): Promise<string>;

    userTickets(arg0: string): Promise<BigNumber>;

    winner(): Promise<string>;
  };

  beacon(): Promise<BigNumber>;

  board(): Promise<string>;

  computeWinner(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  deadline(): Promise<BigNumber>;

  entries(arg0: BigNumberish): Promise<string>;

  jobId(): Promise<string>;

  linkPayment(): Promise<BigNumber>;

  oracle(): Promise<string>;

  oracleCon(): Promise<string>;

  path(): Promise<string>;

  relayHub(): Promise<string>;

  relayers(arg0: string): Promise<boolean>;

  requestBeacon(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  requestedBeacon(): Promise<boolean>;

  sendPrize(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  startBlock(): Promise<BigNumber>;

  submit(
    _message: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  totalTickets(): Promise<BigNumber>;

  url(): Promise<string>;

  userTickets(arg0: string): Promise<BigNumber>;

  winner(): Promise<string>;

  filters: {
    Deposit(depositor: null, deposit: null): EventFilter;

    Entry(
      signer: string | null,
      newTickets: BigNumberish | null,
      message: string | null
    ): EventFilter;

    RequestBeacon(): EventFilter;

    Winner(
      winningTicket: BigNumberish | null,
      winner: string | null,
      prize: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    beacon(): Promise<BigNumber>;

    board(): Promise<BigNumber>;

    computeWinner(): Promise<BigNumber>;

    deadline(): Promise<BigNumber>;

    entries(arg0: BigNumberish): Promise<BigNumber>;

    jobId(): Promise<BigNumber>;

    linkPayment(): Promise<BigNumber>;

    oracle(): Promise<BigNumber>;

    oracleCon(): Promise<BigNumber>;

    path(): Promise<BigNumber>;

    relayHub(): Promise<BigNumber>;

    relayers(arg0: string): Promise<BigNumber>;

    requestBeacon(): Promise<BigNumber>;

    requestedBeacon(): Promise<BigNumber>;

    sendPrize(): Promise<BigNumber>;

    startBlock(): Promise<BigNumber>;

    submit(_message: string): Promise<BigNumber>;

    totalTickets(): Promise<BigNumber>;

    url(): Promise<BigNumber>;

    userTickets(arg0: string): Promise<BigNumber>;

    winner(): Promise<BigNumber>;
  };
}
